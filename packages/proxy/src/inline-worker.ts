export const EMBEDDED_WORKER_CODE = "// @bun
var AH=(H,Q)=>()=>(Q||H((Q={exports:{}}).exports,Q),Q.exports);var q=(H,Q)=>()=>(H&&(Q=H(H=0)),Q);var o=import.meta.require;var h,r;var _0=q(()=>{h={SECOND:1000,MINUTE:60000,HOUR:3600000,DAY:86400000,SESSION_DURATION_DEFAULT:18000000,SESSION_DURATION_FALLBACK:3600000,STREAM_TIMEOUT_DEFAULT:60000,OAUTH_STATE_TTL:10,RETRY_DELAY_DEFAULT:1000,CACHE_YEAR:31536000},r={STREAM_USAGE_BUFFER_KB:64,STREAM_USAGE_BUFFER_BYTES:65536,STREAM_BODY_MAX_KB:256,STREAM_BODY_MAX_BYTES:262144,ANTHROPIC_STREAM_CAP_BYTES:32768,STREAM_TEE_MAX_BYTES:1048576,LOG_FILE_MAX_SIZE:10485760}});var P0=()=>{};class m0{disposables=new Set;isShuttingDown=!1;register(H){this.disposables.add(H)}unregister(H){this.disposables.delete(H)}async shutdown(){if(this.isShuttingDown)return;this.isShuttingDown=!0;let H=[],Q=Array.from(this.disposables).reverse();for(let $ of Q)try{await $.dispose()}catch(X){H.push(X instanceof Error?X:Error(`Disposal error: ${String(X)}`))}if(this.disposables.clear(),this.isShuttingDown=!1,H.length>0)throw AggregateError(H,"Errors occurred during shutdown")}clear(){this.disposables.clear(),this.isShuttingDown=!1}}var pQ;var g0=q(()=>{pQ=new m0});import{createWriteStream as VH,existsSync as t,mkdirSync as OH,statSync as TH}from"fs";import{tmpdir as LH}from"os";import{join as c0}from"path";function SH(H){kH.add(H)}class l0{logDir;logFile;stream=null;maxFileSize=NH.LOG_FILE_MAX_SIZE;constructor(){if(this.logDir=c0(LH(),"better-ccflare-logs"),!t(this.logDir))OH(this.logDir,{recursive:!0});this.logFile=c0(this.logDir,"app.log"),this.initStream()}initStream(){if(this.stream&&!this.stream.destroyed)this.stream.end(),this.stream=null;if(t(this.logFile)){if(TH(this.logFile).size>this.maxFileSize)this.rotateLog()}this.stream=VH(this.logFile,{flags:"a"})}rotateLog(){if(this.stream)this.stream.end();if(t(this.logFile))try{o("fs").unlinkSync(this.logFile)}catch(H){console.error("Failed to rotate log:",H)}}write(H){if(!this.stream||this.stream.destroyed)this.initStream();let Q=`${JSON.stringify(H)}
`;if(this.stream)this.stream.write(Q)}async readLogs(H=EH.LOG_READ_DEFAULT){if(!t(this.logFile))return[];try{return(await Bun.file(this.logFile).text()).trim().split(`
`).filter(Boolean).slice(-H).map((X)=>{try{return JSON.parse(X)}catch{return null}}).filter((X)=>X!==null)}catch(Q){return console.error("Failed to read logs:",Q),[]}}close(){if(this.stream)this.stream.end(),this.stream=null}dispose(){this.close()}}var NH,EH,kH,hH,C;var x0=q(()=>{NH={LOG_FILE_MAX_SIZE:10485760},EH={LOG_MESSAGE_MAX_LENGTH:1e4,LOG_READ_DEFAULT:1000},kH=new Set;hH=typeof process<"u"&&process.versions!=null&&process.versions.node!=null,C=hH?new l0:null;if(C)SH(C)});import{EventEmitter as CH}from"events";class _{level;prefix;format;silentConsole;constructor(H="",Q=1){this.prefix=H,this.level=this.getLogLevelFromEnv()||Q,this.format=this.getFormatFromEnv(),this.silentConsole=!(this.isDebugEnabled()||this.level===0)}getLogLevelFromEnv(){if(typeof process>"u"||!process.env)return null;let H=process.env.LOG_LEVEL?.toUpperCase();if(H&&H in U0)return U0[H];return null}getFormatFromEnv(){if(typeof process>"u"||!process.env)return"pretty";return process.env.LOG_FORMAT||"pretty"}isDebugEnabled(){if(typeof process>"u"||!process.env)return!1;return process.env.BETTER_CCFLARE_DEBUG==="1"||process.env.ccflare_DEBUG==="1"}formatMessage(H,Q,$){let X=new Date().toISOString();if(this.format==="json"){let J={ts:X,level:H,prefix:this.prefix||void 0,msg:Q,...$&&{data:$}};return JSON.stringify(J)}else{let J=this.prefix?`[${this.prefix}] `:"",Z=$?` ${JSON.stringify($)}`:"";return`[${X}] ${H}: ${J}${Q}${Z}`}}debug(H,Q){if(this.level<=0){let $=this.formatMessage("DEBUG",H,Q),X={ts:Date.now(),level:"DEBUG",msg:H};if(a.emit("log",X),C?.write(X),!this.silentConsole)console.log($)}}info(H,Q){if(this.level<=1){let $=this.formatMessage("INFO",H,Q),X={ts:Date.now(),level:"INFO",msg:H};if(a.emit("log",X),C?.write(X),!this.silentConsole)console.log($)}}warn(H,Q){if(this.level<=2){let $=this.formatMessage("WARN",H,Q),X={ts:Date.now(),level:"WARN",msg:H};if(a.emit("log",X),C?.write(X),!this.silentConsole)console.warn($)}}error(H,Q){if(this.level<=3){let $=this.formatMessage("ERROR",H,Q),X={ts:Date.now(),level:"ERROR",msg:H};if(a.emit("log",X),C?.write(X),!this.silentConsole)console.error($)}}setLevel(H){this.level=H,this.silentConsole=!(this.isDebugEnabled()||this.level===0)}getLevel(){return this.level}}var U0,a,sQ;var N=q(()=>{x0();x0();((J)=>{J[J.DEBUG=0]="DEBUG";J[J.INFO=1]="INFO";J[J.WARN=2]="WARN";J[J.ERROR=3]="ERROR"})(U0||={});a=new CH;sQ=new _});class d0{intervals=new Map;isShuttingDown=!1;register(H){if(this.isShuttingDown)return E.warn(`Cannot register interval ${H.id} - manager is shutting down`),()=>{};if(this.intervals.has(H.id))E.warn(`Interval ${H.id} already exists, replacing it`),this.unregister(H.id);let Q=this.createWrappedCallback(H),$=setInterval(Q,H.intervalMs),X={config:H,intervalId:$,lastRun:0,isRunning:!1,runCount:0};if(this.intervals.set(H.id,X),H.immediate)Q();return E.debug(`Registered interval ${H.id} (${H.intervalMs}ms)${H.description?` - ${H.description}`:""}`),()=>this.unregister(H.id)}unregister(H){let Q=this.intervals.get(H);if(!Q)return!1;return clearInterval(Q.intervalId),this.intervals.delete(H),E.debug(`Unregistered interval ${H} (ran ${Q.runCount} times)`),!0}getIntervalInfo(){return Array.from(this.intervals.entries()).map(([H,Q])=>({id:H,intervalMs:Q.config.intervalMs,lastRun:Q.lastRun,isRunning:Q.isRunning,runCount:Q.runCount,description:Q.config.description}))}has(H){return this.intervals.has(H)}getActiveCount(){return this.intervals.size}shutdown(){E.info(`Shutting down interval manager - stopping ${this.intervals.size} intervals`),this.isShuttingDown=!0;for(let[Q,$]of this.intervals.entries())clearInterval($.intervalId);let H=this.intervals.size;this.intervals.clear(),E.info(`Stopped ${H} intervals`)}createWrappedCallback(H){return async()=>{let Q=this.intervals.get(H.id);if(!Q||this.isShuttingDown)return;if(Q.isRunning&&H.maxConcurrent===1){E.debug(`Skipping interval ${H.id} - already running`);return}Q.isRunning=!0,Q.lastRun=Date.now(),Q.runCount++;try{await H.callback()}catch($){E.error(`Error in interval ${H.id}:`,$)}finally{Q.isRunning=!1}}}updateInterval(H,Q){let $=this.intervals.get(H);if(!$)return!1;clearInterval($.intervalId);let X=this.createWrappedCallback($.config);return $.intervalId=setInterval(X,Q),$.config.intervalMs=Q,E.debug(`Updated interval ${H} to ${Q}ms`),!0}}var E,A0;var n0=q(()=>{N();E=new _("IntervalManager");A0=new d0;if(typeof process<"u")process.on("SIGINT",()=>{A0.shutdown(),process.exit(0)}),process.on("SIGTERM",()=>{A0.shutdown(),process.exit(0)})});var V0=q(()=>{P0()});var Z6;var s0=q(()=>{N();V0();Z6=new _("ModelMappings")});var z,I,IH,wH,o0;var O0=q(()=>{z={HAIKU_3_5:"claude-3-5-haiku-20241022",SONNET_3_5:"claude-3-5-sonnet-20241022",SONNET_4:"claude-sonnet-4-20250514",SONNET_4_5:"claude-sonnet-4-5-20250929",OPUS_4:"claude-opus-4-20250514",OPUS_4_1:"claude-opus-4-1-20250805",OPUS_3:"claude-3-opus-20240229",SONNET_3:"claude-3-sonnet-20240229"},I={[z.HAIKU_3_5]:"Claude Haiku 3.5",[z.SONNET_3_5]:"Claude Sonnet 3.5 v2",[z.SONNET_4]:"Claude Sonnet 4",[z.SONNET_4_5]:"Claude Sonnet 4.5",[z.OPUS_4]:"Claude Opus 4",[z.OPUS_4_1]:"Claude Opus 4.1",[z.OPUS_3]:"Claude Opus 3",[z.SONNET_3]:"Claude Sonnet 3"},IH={[z.HAIKU_3_5]:"claude-3.5-haiku",[z.SONNET_3_5]:"claude-3.5-sonnet",[z.SONNET_4]:"claude-sonnet-4",[z.SONNET_4_5]:"claude-sonnet-4.5",[z.OPUS_4]:"claude-opus-4",[z.OPUS_4_1]:"claude-opus-4.1",[z.OPUS_3]:"claude-3-opus",[z.SONNET_3]:"claude-3-sonnet"},wH=z.SONNET_4,o0=z.SONNET_4});import{promises as e}from"fs";import{tmpdir as DH}from"os";import{join as r0}from"path";class D{static instance;priceData=null;lastFetch=0;warnedModels=new Set;logger=null;constructor(){}setLogger(H){this.logger=H}static get(){if(!D.instance)D.instance=new D;return D.instance}getCacheDir(){return r0(DH(),"better-ccflare")}getCachePath(){return r0(this.getCacheDir(),"models.dev.json")}getCacheDurationMs(){return(Number(process.env.CF_PRICING_REFRESH_HOURS)||24)*h.HOUR}async ensureCacheDir(){try{await e.mkdir(this.getCacheDir(),{recursive:!0})}catch(H){this.logger?.warn("Failed to create cache directory: %s",H)}}mergePricingData(H,Q){let $={},X=["zai","anthropic"];for(let J of X)if(H[J])$[J]=H[J];for(let[J,Z]of Object.entries(H))if(!$[J]&&!this.shouldFilterProvider(J,Z))$[J]=Z;for(let[J,Z]of Object.entries(Q))if(!$[J])this.logger?.warn("Provider %s not found in remote pricing, using bundled data",J),$[J]=Z;else if(Z.models){if(!$[J].models)$[J].models={};let Y=0;for(let[G,W]of Object.entries(Z.models))if(!$[J].models?.[G])$[J].models[G]=W,Y++;if(Y>0)this.logger?.debug("Added %d missing models for provider %s from bundled pricing",Y,J)}return $}shouldFilterProvider(H,Q){if([/-coding-plan$/,/-special$/,/-demo$/,/-free$/,/-trial$/].some((X)=>X.test(H)))return this.logger?.debug("Filtering out provider %s due to problematic name pattern",H),!0;if(Q.models){let X=Object.entries(Q.models);if(X.length>0){if(X.every(([,Z])=>{if(!Z||typeof Z!=="object"||!("cost"in Z))return!0;let Y=Z.cost;if(!Y||typeof Y!=="object")return!0;let{input:G=0,output:W=0,cache_read:R=0,cache_write:v=0}=Y;return G===0&&W===0&&R===0&&v===0}))return this.logger?.debug("Filtering out provider %s because all models have zero cost",H),!0}}return!1}async loadFromCache(){try{let H=this.getCachePath(),Q=await e.stat(H);if(Date.now()-Q.mtime.getTime()<this.getCacheDurationMs()){let X=await e.readFile(H,"utf-8");return JSON.parse(X)}}catch{}return null}async saveToCache(H){try{await this.ensureCacheDir();let Q=this.getCachePath();await e.writeFile(Q,JSON.stringify(H,null,2))}catch(Q){this.logger?.warn("Failed to save pricing cache: %s",Q)}}async fetchRemote(){if(process.env.CF_PRICING_OFFLINE==="1")return null;try{let H=await fetch("https://models.dev/api.json");if(!H.ok)throw Error(`HTTP ${H.status}: ${H.statusText}`);let Q=await H.json();return await this.saveToCache(Q),Q}catch(H){return this.logger?.warn("Failed to fetch pricing data: %s",H),null}}async getPricing(){if(this.priceData&&Date.now()-this.lastFetch<this.getCacheDurationMs())return this.priceData;let H=await this.fetchRemote();if(!H)H=await this.loadFromCache();if(H)H=this.mergePricingData(H,T0);else H=T0;return this.priceData=H,this.lastFetch=Date.now(),H}warnOnce(H,Q){if(!this.warnedModels.has(H))if(this.warnedModels.add(H),Q)this.logger?.warn("Price for model %s not found - cost set to 0 (reason: %s)",H,Q instanceof Error?Q.message:Q);else this.logger?.warn("Price for model %s not found - cost set to 0",H)}}async function H0(H,Q){let X=await D.get().getPricing();for(let J of Object.values(X))if(J.models?.[H]){let Z=J.models[H];if(!Z.cost)throw Error(`Model ${H} has no cost information`);let Y=Q==="cache_read"||Q==="cache_write"?Q:Q==="input"?"input":"output",G=Z.cost[Y];if(G===void 0)throw Error(`Model ${H} has no ${Q} cost`);return G/1e6}throw Error(`Model ${H} not found in pricing catalogue`)}async function L0(H,Q){let $=D.get();try{let X=0;if(Q.inputTokens){let J=await H0(H,"input");X+=Q.inputTokens*J}if(Q.outputTokens){let J=await H0(H,"output");X+=Q.outputTokens*J}if(Q.cacheReadInputTokens){let J=await H0(H,"cache_read");X+=Q.cacheReadInputTokens*J}if(Q.cacheCreationInputTokens){let J=await H0(H,"cache_write");X+=Q.cacheCreationInputTokens*J}return X}catch(X){return $.warnOnce(H,X instanceof Error?X:String(X)),0}}var T0;var t0=q(()=>{_0();O0();T0={anthropic:{models:{[z.HAIKU_3_5]:{id:z.HAIKU_3_5,name:I[z.HAIKU_3_5],cost:{input:0.8,output:4,cache_read:0.08,cache_write:1}},[z.SONNET_3_5]:{id:z.SONNET_3_5,name:I[z.SONNET_3_5],cost:{input:3,output:15,cache_read:0.3,cache_write:3.75}},[z.SONNET_4]:{id:z.SONNET_4,name:I[z.SONNET_4],cost:{input:3,output:15,cache_read:0.3,cache_write:3.75}},[z.SONNET_4_5]:{id:z.SONNET_4_5,name:I[z.SONNET_4_5],cost:{input:3,output:15,cache_read:0.3,cache_write:3.75}},[z.OPUS_4]:{id:z.OPUS_4,name:I[z.OPUS_4],cost:{input:15,output:75,cache_read:1.5,cache_write:18.75}},[z.OPUS_4_1]:{id:z.OPUS_4_1,name:I[z.OPUS_4_1],cost:{input:15,output:75,cache_read:1.5,cache_write:18.75}}}}};T0.zai={models:{"glm-4.5":{id:"glm-4.5",name:"GLM-4.5",cost:{input:0.6,output:2.2,cache_read:0.11,cache_write:0}},"glm-4.5-air":{id:"glm-4.5-air",name:"GLM-4.5-Air",cost:{input:0.2,output:1.1,cache_read:0.03,cache_write:0}},"glm-4.6":{id:"glm-4.6",name:"GLM-4.6",cost:{input:0.6,output:2.2,cache_read:0.11,cache_write:0}},"glm-4.6-air":{id:"glm-4.6-air",name:"GLM-4.6-Air",cost:{input:0.2,output:1.1,cache_read:0.03,cache_write:0}}}}});import{EventEmitter as MH}from"events";var a0,yH;var e0=q(()=>{a0=class a0 extends MH{};yH=new a0;yH.setMaxListeners(50)});function N0(H){return{id:H.id,name:H.name,provider:H.provider||"anthropic",api_key:H.api_key,refresh_token:H.refresh_token,access_token:H.access_token,expires_at:H.expires_at,created_at:H.created_at,last_used:H.last_used,request_count:H.request_count,total_requests:H.total_requests,rate_limited_until:H.rate_limited_until||null,session_start:H.session_start||null,session_request_count:H.session_request_count||0,account_tier:H.account_tier||1,paused:H.paused===1,rate_limit_reset:H.rate_limit_reset||null,rate_limit_status:H.rate_limit_status||null,rate_limit_remaining:H.rate_limit_remaining||null,priority:H.priority||0,auto_fallback_enabled:H.auto_fallback_enabled===1,auto_refresh_enabled:H.auto_refresh_enabled===1,custom_endpoint:H.custom_endpoint||null,model_mappings:H.model_mappings||null}}var x6;var HH=q(()=>{M();x6=[z.OPUS_4,z.OPUS_4_1,z.SONNET_4,z.SONNET_4_5]});var QH=()=>{};var Q0,V6,O6,T6;var $H=q(()=>{Q0={ANTHROPIC:"anthropic",ZAI:"zai",OPENAI_COMPATIBLE:"openai-compatible"},V6=new Set([Q0.ANTHROPIC]),O6=new Set([Q0.ANTHROPIC]),T6=new Set([Q0.ZAI,Q0.OPENAI_COMPATIBLE])});var XH=()=>{};var L="no_account";var $0;var JH=q(()=>{((Q)=>Q.Session="session")($0||={})});var y=q(()=>{HH();QH();$H();XH();JH()});var m6,bH;var ZH=q(()=>{y();y();m6=Object.values($0),bH="session"});var M=q(()=>{_0();P0();g0();n0();s0();O0();t0();e0();ZH();V0()});import{homedir as YH}from"os";import{join as J0}from"path";import{platform as pH}from"process";function Z0(){if(pH==="win32"){let H=process.env.LOCALAPPDATA??process.env.APPDATA??J0(YH(),"AppData","Local");return J0(H,"better-ccflare")}else{let Q=process.env.XDG_CONFIG_HOME??J0(YH(),".config");return J0(Q,"better-ccflare")}}var k0=()=>{};var S0=q(()=>{k0()});var r5;var GH=q(()=>{M();N();S0();S0();k0();r5=new _("Config")});var qH=AH((WQ,U)=>{var K;WQ.__wbg_set_wasm=function(H){K=H};var $Q=typeof TextDecoder>"u"?(0,U.require)("util").TextDecoder:TextDecoder,RH=new $Q("utf-8",{ignoreBOM:!0,fatal:!0});RH.decode();var z0=null;function u(){if(z0===null||z0.byteLength===0)z0=new Uint8Array(K.memory.buffer);return z0}function B0(H,Q){return H=H>>>0,RH.decode(u().subarray(H,H+Q))}var k=Array(128).fill(void 0);k.push(void 0,null,!0,!1);var c=k.length;function T(H){if(c===k.length)k.push(k.length+1);let Q=c;return c=k[Q],k[Q]=H,Q}function FH(H,Q){try{return H.apply(this,Q)}catch($){K.__wbindgen_export_0(T($))}}function q0(H){return k[H]}function XQ(H){if(H<132)return;k[H]=c,c=H}function b(H){let Q=q0(H);return XQ(H),Q}var x=0,JQ=typeof TextEncoder>"u"?(0,U.require)("util").TextEncoder:TextEncoder,F0=new JQ("utf-8"),ZQ=typeof F0.encodeInto==="function"?function(H,Q){return F0.encodeInto(H,Q)}:function(H,Q){let $=F0.encode(H);return Q.set($),{read:H.length,written:$.length}};function w(H,Q,$){if($===void 0){let G=F0.encode(H),W=Q(G.length,1)>>>0;return u().subarray(W,W+G.length).set(G),x=G.length,W}let X=H.length,J=Q(X,1)>>>0,Z=u(),Y=0;for(;Y<X;Y++){let G=H.charCodeAt(Y);if(G>127)break;Z[J+Y]=G}if(Y!==X){if(Y!==0)H=H.slice(Y);J=$(J,X,X=Y+H.length*3,1)>>>0;let G=u().subarray(J+Y,J+X),W=ZQ(H,G);Y+=W.written,J=$(J,X,Y,1)>>>0}return x=Y,J}function KQ(H){return H===void 0||H===null}var f=null;function B(){if(f===null||f.buffer.detached===!0||f.buffer.detached===void 0&&f.buffer!==K.memory.buffer)f=new DataView(K.memory.buffer);return f}var R0=null;function BH(){if(R0===null||R0.byteLength===0)R0=new Uint32Array(K.memory.buffer);return R0}function WH(H,Q){return H=H>>>0,BH().subarray(H/4,H/4+Q)}function YQ(H,Q){let $=Q(H.length*1,1)>>>0;return u().set(H,$/1),x=H.length,$}function GQ(H,Q){let $=Q(H.length*4,4)>>>0;return BH().set(H,$/4),x=H.length,$}function zH(H,Q){return H=H>>>0,u().subarray(H/1,H/1+Q)}WQ.get_encoding=function(H,Q){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let Z=K.__wbindgen_add_to_stack_pointer(-16),Y=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),G=x;K.get_encoding(Z,Y,G,T(Q));var $=B().getInt32(Z+0,!0),X=B().getInt32(Z+4,!0),J=B().getInt32(Z+8,!0);if(J)throw b(X);return l.__wrap($)}finally{K.__wbindgen_add_to_stack_pointer(16)}};WQ.encoding_for_model=function(H,Q){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let Z=K.__wbindgen_add_to_stack_pointer(-16),Y=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),G=x;K.encoding_for_model(Z,Y,G,T(Q));var $=B().getInt32(Z+0,!0),X=B().getInt32(Z+4,!0),J=B().getInt32(Z+8,!0);if(J)throw b(X);return l.__wrap($)}finally{K.__wbindgen_add_to_stack_pointer(16)}};var y0=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((H)=>K.__wbg_tiktoken_free(H>>>0,1));class l{constructor(H,Q,$){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");let X=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),J=x,Z=w($,K.__wbindgen_export_1,K.__wbindgen_export_2),Y=x,G=K.tiktoken_new(X,J,T(Q),Z,Y);return this.__wbg_ptr=G>>>0,y0.register(this,this.__wbg_ptr,this),this}get name(){try{let $=K.__wbindgen_add_to_stack_pointer(-16);K.tiktoken_name($,this.__wbg_ptr);var H=B().getInt32($+0,!0),Q=B().getInt32($+4,!0);let X;if(H!==0)X=B0(H,Q).slice(),K.__wbindgen_export_3(H,Q*1,1);return X}finally{K.__wbindgen_add_to_stack_pointer(16)}}static __wrap(H){H=H>>>0;let Q=Object.create(l.prototype);return Q.__wbg_ptr=H,y0.register(Q,Q.__wbg_ptr,Q),Q}__destroy_into_raw(){let H=this.__wbg_ptr;return this.__wbg_ptr=0,y0.unregister(this),H}free(){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");let H=this.__destroy_into_raw();K.__wbg_tiktoken_free(H,0)}encode(H,Q,$){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let W=K.__wbindgen_add_to_stack_pointer(-16),R=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),v=x;K.tiktoken_encode(W,this.__wbg_ptr,R,v,T(Q),T($));var X=B().getInt32(W+0,!0),J=B().getInt32(W+4,!0),Z=B().getInt32(W+8,!0),Y=B().getInt32(W+12,!0);if(Y)throw b(Z);var G=WH(X,J).slice();return K.__wbindgen_export_3(X,J*4,4),G}finally{K.__wbindgen_add_to_stack_pointer(16)}}encode_ordinary(H){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let J=K.__wbindgen_add_to_stack_pointer(-16),Z=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),Y=x;K.tiktoken_encode_ordinary(J,this.__wbg_ptr,Z,Y);var Q=B().getInt32(J+0,!0),$=B().getInt32(J+4,!0),X=WH(Q,$).slice();return K.__wbindgen_export_3(Q,$*4,4),X}finally{K.__wbindgen_add_to_stack_pointer(16)}}encode_with_unstable(H,Q,$){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let Y=K.__wbindgen_add_to_stack_pointer(-16),G=w(H,K.__wbindgen_export_1,K.__wbindgen_export_2),W=x;K.tiktoken_encode_with_unstable(Y,this.__wbg_ptr,G,W,T(Q),T($));var X=B().getInt32(Y+0,!0),J=B().getInt32(Y+4,!0),Z=B().getInt32(Y+8,!0);if(Z)throw b(J);return b(X)}finally{K.__wbindgen_add_to_stack_pointer(16)}}encode_single_token(H){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");let Q=YQ(H,K.__wbindgen_export_1),$=x;return K.tiktoken_encode_single_token(this.__wbg_ptr,Q,$)>>>0}decode(H){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let J=K.__wbindgen_add_to_stack_pointer(-16),Z=GQ(H,K.__wbindgen_export_1),Y=x;K.tiktoken_decode(J,this.__wbg_ptr,Z,Y);var Q=B().getInt32(J+0,!0),$=B().getInt32(J+4,!0),X=zH(Q,$).slice();return K.__wbindgen_export_3(Q,$*1,1),X}finally{K.__wbindgen_add_to_stack_pointer(16)}}decode_single_token_bytes(H){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");try{let J=K.__wbindgen_add_to_stack_pointer(-16);K.tiktoken_decode_single_token_bytes(J,this.__wbg_ptr,H);var Q=B().getInt32(J+0,!0),$=B().getInt32(J+4,!0),X=zH(Q,$).slice();return K.__wbindgen_export_3(Q,$*1,1),X}finally{K.__wbindgen_add_to_stack_pointer(16)}}token_byte_values(){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");let H=K.tiktoken_token_byte_values(this.__wbg_ptr);return b(H)}}WQ.Tiktoken=l;WQ.__wbg_parse_def2e24ef1252aff=function(){return FH(function(H,Q){let $=JSON.parse(B0(H,Q));return T($)},arguments)};WQ.__wbg_stringify_f7ed6987935b4a24=function(){return FH(function(H){let Q=JSON.stringify(q0(H));return T(Q)},arguments)};WQ.__wbindgen_error_new=function(H,Q){let $=Error(B0(H,Q));return T($)};WQ.__wbindgen_is_undefined=function(H){return q0(H)===void 0};WQ.__wbindgen_object_drop_ref=function(H){b(H)};WQ.__wbindgen_string_get=function(H,Q){if(K==null)throw Error("tiktoken: WASM binary has not been propery initialized.");let $=q0(Q),X=typeof $==="string"?$:void 0;var J=KQ(X)?0:w(X,K.__wbindgen_export_1,K.__wbindgen_export_2),Z=x;B().setInt32(H+4,Z,!0),B().setInt32(H+0,J,!0)};WQ.__wbindgen_throw=function(H,Q){throw Error(B0(H,Q))}});M();import{Database as sH}from"bun:sqlite";import{mkdirSync as oH}from"fs";import{dirname as rH}from"path";N();N();var P=new _("PerformanceIndexes");function KH(H){P.info("Adding performance indexes..."),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_timestamp_account 
		ON requests(timestamp DESC, account_used)
	`),P.info("Added index: idx_requests_timestamp_account"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_model_timestamp 
		ON requests(model, timestamp DESC) 
		WHERE model IS NOT NULL
	`),P.info("Added index: idx_requests_model_timestamp"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_success_timestamp 
		ON requests(success, timestamp DESC)
	`),P.info("Added index: idx_requests_success_timestamp"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_paused 
		ON accounts(paused) 
		WHERE paused = 0
	`),P.info("Added index: idx_accounts_paused"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_account_timestamp 
		ON requests(account_used, timestamp DESC)
	`),P.info("Added index: idx_requests_account_timestamp"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_cost_model 
		ON requests(cost_usd, model, timestamp DESC) 
		WHERE cost_usd > 0 AND model IS NOT NULL
	`),P.info("Added index: idx_requests_cost_model"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_response_time 
		ON requests(model, response_time_ms) 
		WHERE response_time_ms IS NOT NULL AND model IS NOT NULL
	`),P.info("Added index: idx_requests_response_time"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_requests_tokens 
		ON requests(timestamp DESC, total_tokens) 
		WHERE total_tokens > 0
	`),P.info("Added index: idx_requests_tokens"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_name 
		ON accounts(name)
	`),P.info("Added index: idx_accounts_name"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_rate_limited 
		ON accounts(rate_limited_until) 
		WHERE rate_limited_until IS NOT NULL
	`),P.info("Added index: idx_accounts_rate_limited"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_session 
		ON accounts(session_start, session_request_count) 
		WHERE session_start IS NOT NULL
	`),P.info("Added index: idx_accounts_session"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_request_count
		ON accounts(request_count DESC, last_used)
	`),P.info("Added index: idx_accounts_request_count"),H.run(`
		CREATE INDEX IF NOT EXISTS idx_accounts_priority
		ON accounts(priority ASC, request_count DESC, last_used)
	`),P.info("Added index: idx_accounts_priority"),P.info("Performance indexes added successfully")}var F=new _("DatabaseMigrations");function X0(H){H.run(`
		CREATE TABLE IF NOT EXISTS accounts (
			id TEXT PRIMARY KEY,
			name TEXT NOT NULL,
			provider TEXT DEFAULT 'anthropic',
			api_key TEXT,
			refresh_token TEXT NOT NULL,
			access_token TEXT,
			expires_at INTEGER,
			created_at INTEGER NOT NULL,
			last_used INTEGER,
			request_count INTEGER DEFAULT 0,
			total_requests INTEGER DEFAULT 0,
			account_tier INTEGER DEFAULT 1,
			priority INTEGER DEFAULT 0
		)
	`),H.run(`
		CREATE TABLE IF NOT EXISTS requests (
			id TEXT PRIMARY KEY,
			timestamp INTEGER NOT NULL,
			method TEXT NOT NULL,
			path TEXT NOT NULL,
			account_used TEXT,
			status_code INTEGER,
			success BOOLEAN,
			error_message TEXT,
			response_time_ms INTEGER,
			failover_attempts INTEGER DEFAULT 0,
			model TEXT,
			prompt_tokens INTEGER DEFAULT 0,
			completion_tokens INTEGER DEFAULT 0,
			total_tokens INTEGER DEFAULT 0,
			cost_usd REAL DEFAULT 0,
			output_tokens_per_second REAL,
			input_tokens INTEGER DEFAULT 0,
			cache_read_input_tokens INTEGER DEFAULT 0,
			cache_creation_input_tokens INTEGER DEFAULT 0,
			output_tokens INTEGER DEFAULT 0,
			agent_used TEXT
		)
	`),H.run("CREATE INDEX IF NOT EXISTS idx_requests_timestamp ON requests(timestamp DESC)"),H.run("CREATE INDEX IF NOT EXISTS idx_requests_account_used ON requests(account_used)"),H.run("CREATE INDEX IF NOT EXISTS idx_requests_timestamp_account ON requests(timestamp DESC, account_used)"),H.run(`
		CREATE TABLE IF NOT EXISTS request_payloads (
			id TEXT PRIMARY KEY,
			json TEXT NOT NULL,
			FOREIGN KEY (id) REFERENCES requests(id) ON DELETE CASCADE
		)
	`),H.run(`
		CREATE TABLE IF NOT EXISTS oauth_sessions (
			id TEXT PRIMARY KEY,
			account_name TEXT NOT NULL,
			verifier TEXT NOT NULL,
			mode TEXT NOT NULL,
			tier INTEGER DEFAULT 1,
			created_at INTEGER NOT NULL,
			expires_at INTEGER NOT NULL
		)
	`),H.run("CREATE INDEX IF NOT EXISTS idx_oauth_sessions_expires ON oauth_sessions(expires_at)"),H.run(`
		CREATE TABLE IF NOT EXISTS agent_preferences (
			agent_id TEXT PRIMARY KEY,
			model TEXT NOT NULL,
			updated_at INTEGER NOT NULL
		)
	`)}function E0(H){X0(H);let $=H.prepare("PRAGMA table_info(accounts)").all().map((G)=>G.name);if(!$.includes("rate_limited_until"))H.prepare("ALTER TABLE accounts ADD COLUMN rate_limited_until INTEGER").run(),F.info("Added rate_limited_until column to accounts table");if(!$.includes("session_start"))H.prepare("ALTER TABLE accounts ADD COLUMN session_start INTEGER").run(),F.info("Added session_start column to accounts table");if(!$.includes("session_request_count"))H.prepare("ALTER TABLE accounts ADD COLUMN session_request_count INTEGER DEFAULT 0").run(),F.info("Added session_request_count column to accounts table");if(!$.includes("account_tier"))H.prepare("ALTER TABLE accounts ADD COLUMN account_tier INTEGER DEFAULT 1").run(),F.info("Added account_tier column to accounts table");if(!$.includes("paused"))H.prepare("ALTER TABLE accounts ADD COLUMN paused INTEGER DEFAULT 0").run(),F.info("Added paused column to accounts table");if(!$.includes("rate_limit_reset"))H.prepare("ALTER TABLE accounts ADD COLUMN rate_limit_reset INTEGER").run(),F.info("Added rate_limit_reset column to accounts table");if(!$.includes("rate_limit_status"))H.prepare("ALTER TABLE accounts ADD COLUMN rate_limit_status TEXT").run(),F.info("Added rate_limit_status column to accounts table");if(!$.includes("rate_limit_remaining"))H.prepare("ALTER TABLE accounts ADD COLUMN rate_limit_remaining INTEGER").run(),F.info("Added rate_limit_remaining column to accounts table");if(!$.includes("priority"))H.prepare("ALTER TABLE accounts ADD COLUMN priority INTEGER DEFAULT 0").run(),F.info("Added priority column to accounts table");if(!$.includes("auto_fallback_enabled"))H.prepare("ALTER TABLE accounts ADD COLUMN auto_fallback_enabled INTEGER DEFAULT 0").run(),F.info("Added auto_fallback_enabled column to accounts table");if(!$.includes("custom_endpoint"))H.prepare("ALTER TABLE accounts ADD COLUMN custom_endpoint TEXT").run(),F.info("Added custom_endpoint column to accounts table");if(!$.includes("auto_refresh_enabled"))H.prepare("ALTER TABLE accounts ADD COLUMN auto_refresh_enabled INTEGER DEFAULT 0").run(),F.info("Added auto_refresh_enabled column to accounts table");if(!$.includes("model_mappings"))H.prepare("ALTER TABLE accounts ADD COLUMN model_mappings TEXT").run(),F.info("Added model_mappings column to accounts table");if(!H.prepare("PRAGMA table_info(oauth_sessions)").all().map((G)=>G.name).includes("custom_endpoint"))H.prepare("ALTER TABLE oauth_sessions ADD COLUMN custom_endpoint TEXT").run(),F.info("Added custom_endpoint column to oauth_sessions table");let Y=H.prepare("PRAGMA table_info(requests)").all().map((G)=>G.name);if(!Y.includes("model"))H.prepare("ALTER TABLE requests ADD COLUMN model TEXT").run(),F.info("Added model column to requests table");if(!Y.includes("prompt_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN prompt_tokens INTEGER DEFAULT 0").run(),F.info("Added prompt_tokens column to requests table");if(!Y.includes("completion_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN completion_tokens INTEGER DEFAULT 0").run(),F.info("Added completion_tokens column to requests table");if(!Y.includes("total_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN total_tokens INTEGER DEFAULT 0").run(),F.info("Added total_tokens column to requests table");if(!Y.includes("cost_usd"))H.prepare("ALTER TABLE requests ADD COLUMN cost_usd REAL DEFAULT 0").run(),F.info("Added cost_usd column to requests table");if(!Y.includes("input_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN input_tokens INTEGER DEFAULT 0").run(),F.info("Added input_tokens column to requests table");if(!Y.includes("cache_read_input_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN cache_read_input_tokens INTEGER DEFAULT 0").run(),F.info("Added cache_read_input_tokens column to requests table");if(!Y.includes("cache_creation_input_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN cache_creation_input_tokens INTEGER DEFAULT 0").run(),F.info("Added cache_creation_input_tokens column to requests table");if(!Y.includes("output_tokens"))H.prepare("ALTER TABLE requests ADD COLUMN output_tokens INTEGER DEFAULT 0").run(),F.info("Added output_tokens column to requests table");if(!Y.includes("agent_used"))H.prepare("ALTER TABLE requests ADD COLUMN agent_used TEXT").run(),F.info("Added agent_used column to requests table");if(!Y.includes("output_tokens_per_second"))H.prepare("ALTER TABLE requests ADD COLUMN output_tokens_per_second REAL").run(),F.info("Added output_tokens_per_second column to requests table");KH(H)}GH();import{join as gH}from"path";function K0(){let H=process.env.BETTER_CCFLARE_DB_PATH||process.env.ccflare_DB_PATH;if(H)return H;let Q=Z0();return gH(Q,"better-ccflare.db")}y();class V{db;constructor(H){this.db=H}query(H,Q=[]){return this.db.query(H).all(...Q)}get(H,Q=[]){return this.db.query(H).get(...Q)}run(H,Q=[]){this.db.run(H,Q)}runWithChanges(H,Q=[]){return this.db.run(H,Q).changes}}class h0 extends V{findAll(){return this.query(`
			SELECT
				id, name, provider, api_key, refresh_token, access_token,
				expires_at, created_at, last_used, request_count, total_requests,
				rate_limited_until, session_start, session_request_count,
				COALESCE(account_tier, 1) as account_tier,
				COALESCE(paused, 0) as paused,
				rate_limit_reset, rate_limit_status, rate_limit_remaining,
				COALESCE(priority, 0) as priority,
				COALESCE(auto_fallback_enabled, 0) as auto_fallback_enabled,
				COALESCE(auto_refresh_enabled, 0) as auto_refresh_enabled,
				custom_endpoint,
				model_mappings
			FROM accounts
			ORDER BY priority DESC
		`).map(N0)}findById(H){let Q=this.get(`
			SELECT
				id, name, provider, api_key, refresh_token, access_token,
				expires_at, created_at, last_used, request_count, total_requests,
				rate_limited_until, session_start, session_request_count,
				COALESCE(account_tier, 1) as account_tier,
				COALESCE(paused, 0) as paused,
				rate_limit_reset, rate_limit_status, rate_limit_remaining,
				COALESCE(priority, 0) as priority,
				COALESCE(auto_fallback_enabled, 0) as auto_fallback_enabled,
				COALESCE(auto_refresh_enabled, 0) as auto_refresh_enabled,
				custom_endpoint,
				model_mappings
			FROM accounts
			WHERE id = ?
		`,[H]);return Q?N0(Q):null}updateTokens(H,Q,$,X){if(X)this.run("UPDATE accounts SET access_token = ?, expires_at = ?, refresh_token = ? WHERE id = ?",[Q,$,X,H]);else this.run("UPDATE accounts SET access_token = ?, expires_at = ? WHERE id = ?",[Q,$,H])}incrementUsage(H,Q){let $=Date.now();this.run(`
			UPDATE accounts 
			SET 
				last_used = ?,
				request_count = request_count + 1,
				total_requests = total_requests + 1,
				session_start = CASE
					WHEN session_start IS NULL OR ? - session_start >= ? THEN ?
					ELSE session_start
				END,
				session_request_count = CASE
					WHEN session_start IS NULL OR ? - session_start >= ? THEN 1
					ELSE session_request_count + 1
				END
			WHERE id = ?
		`,[$,$,Q,$,$,Q,H])}setRateLimited(H,Q){this.run("UPDATE accounts SET rate_limited_until = ? WHERE id = ?",[Q,H])}updateRateLimitMeta(H,Q,$,X){this.run("UPDATE accounts SET rate_limit_status = ?, rate_limit_reset = ?, rate_limit_remaining = ? WHERE id = ?",[Q,$,X??null,H])}updateTier(H,Q){this.run("UPDATE accounts SET account_tier = ? WHERE id = ?",[Q,H])}pause(H){this.run("UPDATE accounts SET paused = 1 WHERE id = ?",[H])}resume(H){this.run("UPDATE accounts SET paused = 0 WHERE id = ?",[H])}resetSession(H,Q){this.run("UPDATE accounts SET session_start = ?, session_request_count = 0 WHERE id = ?",[Q,H])}updateRequestCount(H,Q){this.run("UPDATE accounts SET session_request_count = ? WHERE id = ?",[Q,H])}rename(H,Q){this.run("UPDATE accounts SET name = ? WHERE id = ?",[Q,H])}updatePriority(H,Q){this.run("UPDATE accounts SET priority = ? WHERE id = ?",[Q,H])}setAutoFallbackEnabled(H,Q){this.run("UPDATE accounts SET auto_fallback_enabled = ? WHERE id = ?",[Q?1:0,H])}}class C0 extends V{getPreference(H){return this.get("SELECT model FROM agent_preferences WHERE agent_id = ?",[H])}getAllPreferences(){return this.query("SELECT agent_id, model FROM agent_preferences")}setPreference(H,Q){this.run("INSERT OR REPLACE INTO agent_preferences (agent_id, model, updated_at) VALUES (?, ?, ?)",[H,Q,Date.now()])}deletePreference(H){return this.runWithChanges("DELETE FROM agent_preferences WHERE agent_id = ?",[H])>0}setBulkPreferences(H,Q){if(H.length===0)return;let $=Date.now(),X=H.map(()=>"(?, ?, ?)").join(", "),J=H.flatMap((Z)=>[Z,Q,$]);this.run(`INSERT OR REPLACE INTO agent_preferences (agent_id, model, updated_at) VALUES ${X}`,J)}}class I0 extends V{createSession(H,Q,$,X,J,Z,Y=10){let G=Date.now(),W=G+Y*60*1000;this.run(`
			INSERT INTO oauth_sessions (id, account_name, verifier, mode, tier, custom_endpoint, created_at, expires_at)
			VALUES (?, ?, ?, ?, ?, ?, ?, ?)
		`,[H,Q,$,X,J,Z||null,G,W])}getSession(H){let Q=this.get(`
			SELECT account_name, verifier, mode, tier, custom_endpoint, expires_at
			FROM oauth_sessions
			WHERE id = ? AND expires_at > ?
		`,[H,Date.now()]);if(!Q)return null;return{accountName:Q.account_name,verifier:Q.verifier,mode:Q.mode,tier:Q.tier,customEndpoint:Q.custom_endpoint||void 0}}deleteSession(H){this.run("DELETE FROM oauth_sessions WHERE id = ?",[H])}cleanupExpiredSessions(){return this.runWithChanges("DELETE FROM oauth_sessions WHERE expires_at <= ?",[Date.now()])}}class w0 extends V{saveMeta(H,Q,$,X,J,Z){this.run(`
			INSERT INTO requests (
				id, timestamp, method, path, account_used, 
				status_code, success, error_message, response_time_ms, failover_attempts
			)
			VALUES (?, ?, ?, ?, ?, ?, 0, NULL, 0, 0)
		`,[H,Z||Date.now(),Q,$,X,J])}save(H){let{usage:Q}=H;this.run(`
			INSERT OR REPLACE INTO requests (
				id, timestamp, method, path, account_used, 
				status_code, success, error_message, response_time_ms, failover_attempts,
				model, prompt_tokens, completion_tokens, total_tokens, cost_usd,
				input_tokens, cache_read_input_tokens, cache_creation_input_tokens, output_tokens,
				agent_used, output_tokens_per_second
			)
			VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
		`,[H.id,Date.now(),H.method,H.path,H.accountUsed,H.statusCode,H.success?1:0,H.errorMessage,H.responseTime,H.failoverAttempts,Q?.model||null,Q?.promptTokens||null,Q?.completionTokens||null,Q?.totalTokens||null,Q?.costUsd||null,Q?.inputTokens||null,Q?.cacheReadInputTokens||null,Q?.cacheCreationInputTokens||null,Q?.outputTokens||null,H.agentUsed||null,Q?.tokensPerSecond||null])}updateUsage(H,Q){if(!Q)return;this.run(`
			UPDATE requests
			SET 
				model = COALESCE(?, model),
				prompt_tokens = COALESCE(?, prompt_tokens),
				completion_tokens = COALESCE(?, completion_tokens),
				total_tokens = COALESCE(?, total_tokens),
				cost_usd = COALESCE(?, cost_usd),
				input_tokens = COALESCE(?, input_tokens),
				cache_read_input_tokens = COALESCE(?, cache_read_input_tokens),
				cache_creation_input_tokens = COALESCE(?, cache_creation_input_tokens),
				output_tokens = COALESCE(?, output_tokens),
				output_tokens_per_second = COALESCE(?, output_tokens_per_second)
			WHERE id = ?
		`,[Q.model||null,Q.promptTokens||null,Q.completionTokens||null,Q.totalTokens||null,Q.costUsd||null,Q.inputTokens||null,Q.cacheReadInputTokens||null,Q.cacheCreationInputTokens||null,Q.outputTokens||null,Q.tokensPerSecond||null,H])}savePayload(H,Q){let $=JSON.stringify(Q);this.run("INSERT OR REPLACE INTO request_payloads (id, json) VALUES (?, ?)",[H,$])}getPayload(H){let Q=this.get("SELECT json FROM request_payloads WHERE id = ?",[H]);if(!Q)return null;try{return JSON.parse(Q.json)}catch{return null}}listPayloads(H=50){return this.query(`
			SELECT rp.id, rp.json 
			FROM request_payloads rp
			JOIN requests r ON rp.id = r.id
			ORDER BY r.timestamp DESC
			LIMIT ?
		`,[H])}listPayloadsWithAccountNames(H=50){return this.query(`
			SELECT rp.id, rp.json, a.name as account_name
			FROM request_payloads rp
			JOIN requests r ON rp.id = r.id
			LEFT JOIN accounts a ON r.account_used = a.id
			ORDER BY r.timestamp DESC
			LIMIT ?
		`,[H])}getRecentRequests(H=100){return this.query(`
			SELECT id, timestamp, method, path, account_used, status_code, success, response_time_ms
			FROM requests
			ORDER BY timestamp DESC
			LIMIT ?
		`,[H]).map((Q)=>({...Q,success:Q.success===1}))}getRequestStats(H){let Q=H?"WHERE timestamp > ?":"",$=H?[H]:[],X=this.get(`
			SELECT 
				COUNT(*) as total_requests,
				SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful_requests,
				SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as failed_requests,
				AVG(response_time_ms) as avg_response_time
			FROM requests
			${Q}
		`,$);return{totalRequests:X?.total_requests||0,successfulRequests:X?.successful_requests||0,failedRequests:X?.failed_requests||0,avgResponseTime:X?.avg_response_time||null}}aggregateStats(H){let Q=H?"WHERE timestamp > ?":"",$=H?[Date.now()-H]:[],X=this.get(`
			SELECT 
				COUNT(*) as total_requests,
				SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful_requests,
				AVG(response_time_ms) as avg_response_time,
				SUM(total_tokens) as total_tokens,
				SUM(cost_usd) as total_cost_usd,
				SUM(input_tokens) as input_tokens,
				SUM(output_tokens) as output_tokens,
				SUM(cache_read_input_tokens) as cache_read_input_tokens,
				SUM(cache_creation_input_tokens) as cache_creation_input_tokens,
				AVG(output_tokens_per_second) as avg_tokens_per_second
			FROM requests
			${Q}
		`,$);return{totalRequests:X?.total_requests||0,successfulRequests:X?.successful_requests||0,avgResponseTime:X?.avg_response_time||null,totalTokens:X?.total_tokens||0,totalCostUsd:X?.total_cost_usd||0,inputTokens:X?.input_tokens||0,outputTokens:X?.output_tokens||0,cacheReadInputTokens:X?.cache_read_input_tokens||0,cacheCreationInputTokens:X?.cache_creation_input_tokens||0,avgTokensPerSecond:X?.avg_tokens_per_second||null}}getTopModels(H=10){return this.query(`
			SELECT model, COUNT(*) as count
			FROM requests
			WHERE model IS NOT NULL
			GROUP BY model
			ORDER BY count DESC
			LIMIT ?
		`,[H])}getRecentErrors(H=10){return this.query(`
			SELECT error_message
			FROM requests
			WHERE success = 0 AND error_message IS NOT NULL
			ORDER BY timestamp DESC
			LIMIT ?
		`,[H]).map(($)=>$.error_message)}getRequestsByAccount(H){let Q=H?"WHERE r.timestamp > ?":"",$=H?[H]:[];return this.query(`
			SELECT 
				r.account_used as account_id,
				a.name as account_name,
				COUNT(*) as request_count,
				SUM(CASE WHEN r.success = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as success_rate
			FROM requests r
			LEFT JOIN accounts a ON r.account_used = a.id
			${Q}
			GROUP BY r.account_used
			ORDER BY request_count DESC
		`,$).map((X)=>({accountId:X.account_id,accountName:X.account_name,requestCount:X.request_count,successRate:X.success_rate}))}deleteOlderThan(H){return this.runWithChanges("DELETE FROM requests WHERE timestamp < ?",[H])}deleteOrphanedPayloads(){return this.runWithChanges("DELETE FROM request_payloads WHERE id NOT IN (SELECT id FROM requests)")}deletePayloadsOlderThan(H){return this.runWithChanges("DELETE FROM request_payloads WHERE id IN (SELECT id FROM requests WHERE timestamp < ?)",[H])}}y();class D0{db;constructor(H){this.db=H}getAggregatedStats(){let H=this.db.query(`SELECT 
					COUNT(*) as totalRequests,
					SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successfulRequests,
					AVG(response_time_ms) as avgResponseTime,
					SUM(input_tokens) as inputTokens,
					SUM(output_tokens) as outputTokens,
					SUM(cache_creation_input_tokens) as cacheCreationInputTokens,
					SUM(cache_read_input_tokens) as cacheReadInputTokens,
					SUM(cost_usd) as totalCostUsd,
					AVG(output_tokens_per_second) as avgTokensPerSecond
				FROM requests`).get(),Q=(H.inputTokens||0)+(H.outputTokens||0)+(H.cacheCreationInputTokens||0)+(H.cacheReadInputTokens||0);return{...H,totalTokens:Q,avgResponseTime:H.avgResponseTime||0,totalCostUsd:H.totalCostUsd||0}}getAccountStats(H=10,Q=!0){let $=Q?`
				SELECT 
					COALESCE(a.id, ?) as id,
					COALESCE(a.name, ?) as name,
					COUNT(r.id) as requestCount,
					COALESCE(a.total_requests, 0) as totalRequests
				FROM requests r
				LEFT JOIN accounts a ON a.id = r.account_used
				GROUP BY COALESCE(a.id, ?), COALESCE(a.name, ?)
				HAVING requestCount > 0
				ORDER BY requestCount DESC
				LIMIT ?
			`:`
				SELECT 
					a.id,
					a.name,
					a.request_count as requestCount,
					a.total_requests as totalRequests
				FROM accounts a
				WHERE a.request_count > 0
				ORDER BY a.request_count DESC
				LIMIT ?
			`,X=Q?[L,L,L,L,H]:[H],J=this.db.query($).all(...X);if(J.length===0)return[];let Z=J.map((R)=>R.id),Y=Z.map(()=>"?").join(","),G=this.db.query(`SELECT 
					account_used as accountId,
					COUNT(*) as total,
					SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful
				FROM requests
				WHERE account_used IN (${Y})
				GROUP BY account_used`).all(...Z),W=new Map(G.map((R)=>[R.accountId,R.total>0?Math.round(R.successful/R.total*100):0]));return J.map((R)=>({name:R.name,requestCount:R.requestCount,successRate:W.get(R.id)||0,totalRequests:R.totalRequests}))}getActiveAccountCount(){return this.db.query("SELECT COUNT(*) as count FROM accounts WHERE request_count > 0").get().count}getRecentErrors(H=10){return this.db.query(`SELECT DISTINCT error_message
				FROM requests
				WHERE error_message IS NOT NULL
					AND error_message != ''
				ORDER BY timestamp DESC
				LIMIT ?`).all(H).map(($)=>$.error_message)}getTopModels(H=5){return this.db.query(`WITH model_counts AS (
					SELECT 
						model,
						COUNT(*) as count
					FROM requests
					WHERE model IS NOT NULL
					GROUP BY model
				),
				total AS (
					SELECT COUNT(*) as total FROM requests WHERE model IS NOT NULL
				)
				SELECT 
					mc.model,
					mc.count,
					ROUND(CAST(mc.count AS REAL) / t.total * 100, 2) as percentage
				FROM model_counts mc, total t
				ORDER BY mc.count DESC
				LIMIT ?`).all(H)}}class M0 extends V{getStrategy(H){let Q=super.get("SELECT name, config, updated_at FROM strategies WHERE name = ?",[H]);if(!Q)return null;return{name:Q.name,config:JSON.parse(Q.config),updatedAt:Q.updated_at}}set(H,Q){let $=Date.now(),X=JSON.stringify(Q);this.run("INSERT OR REPLACE INTO strategies (name, config, updated_at) VALUES (?, ?, ?)",[H,X,$])}list(){return this.query("SELECT name, config, updated_at FROM strategies ORDER BY name").map((Q)=>({name:Q.name,config:JSON.parse(Q.config),updatedAt:Q.updated_at}))}delete(H){return this.runWithChanges("DELETE FROM strategies WHERE name = ?",[H])>0}}N();var Y0=new _("db-retry"),cH=["SQLITE_BUSY","SQLITE_LOCKED","database is locked","database table is locked"];function lH(H){if(!H)return!1;let Q=H instanceof Error?H.message:String(H),$=typeof H==="object"&&H!==null&&"code"in H?H.code:void 0;return cH.some((X)=>Q.includes(X)||$===X)}function dH(H,Q){let $=Q.delayMs*Q.backoff**H,X=Math.random()*0.1*$,J=$+X;return Math.min(J,Q.maxDelayMs)}function nH(H){if(typeof Bun<"u"&&Bun.sleepSync)Bun.sleepSync(H);else try{let{spawnSync:Q}=o("child_process"),$=process.platform==="win32"?"timeout":"sleep",X=process.platform==="win32"?`/t ${Math.ceil(H/1000)}`:`${H/1000}`;Q($,[X],{stdio:"ignore",shell:process.platform==="win32"})}catch(Q){throw Error(`Synchronous sleep not supported in this environment. Bun.sleepSync is not available and Node.js child_process failed: ${Q instanceof Error?Q.message:String(Q)}`)}}function iH(H,Q,$){let X;for(let J=0;J<Q.attempts;J++)try{let Z=H();if(J>0)Y0.info(`${$} succeeded after ${J+1} attempts`);return Z}catch(Z){if(X=Z,!lH(Z))throw Y0.debug(`${$} failed with non-retryable error:`,Z),Z;if(J===Q.attempts-1)throw Y0.error(`${$} failed after ${Q.attempts} attempts:`,Z),Z;let Y=dH(J,Q);Y0.warn(`${$} failed (attempt ${J+1}/${Q.attempts}), retrying in ${Y.toFixed(0)}ms:`,Z instanceof Error?Z.message:String(Z)),nH(Y)}throw X}function O(H,Q={},$="database operation"){let X={attempts:3,delayMs:100,backoff:2,maxDelayMs:5000,...Q};return iH(H,X,$)}function tH(H,Q){try{let $=H.query("PRAGMA integrity_check").get();if($.integrity_check!=="ok")throw Error(`Database integrity check failed: ${$.integrity_check}`);if(Q.walMode!==!1)try{if(H.query("PRAGMA journal_mode = WAL").get().journal_mode!=="wal")console.warn("Failed to enable WAL mode, falling back to DELETE mode"),H.run("PRAGMA journal_mode = DELETE")}catch(J){console.warn("WAL mode failed, using DELETE mode:",J),H.run("PRAGMA journal_mode = DELETE")}if(Q.busyTimeoutMs!==void 0)H.run(`PRAGMA busy_timeout = ${Q.busyTimeoutMs}`);if(Q.cacheSize!==void 0)H.run(`PRAGMA cache_size = ${Q.cacheSize}`);let X=Q.synchronous||"FULL";if(H.run(`PRAGMA synchronous = ${X}`),Q.mmapSize!==void 0&&Q.mmapSize>0)try{H.run(`PRAGMA mmap_size = ${Q.mmapSize}`)}catch(J){console.warn("Memory-mapped I/O failed, disabling:",J),H.run("PRAGMA mmap_size = 0")}H.run("PRAGMA temp_store = MEMORY"),H.run("PRAGMA foreign_keys = ON"),H.run("PRAGMA wal_autocheckpoint = 1000")}catch($){throw console.error("Database configuration failed:",$),Error(`Failed to configure SQLite database: ${$}`)}}class m{db;runtime;dbConfig;retryConfig;accounts;requests;oauth;strategy;stats;agentPreferences;constructor(H,Q,$){let X=H??K0();this.dbConfig={walMode:!0,busyTimeoutMs:1e4,cacheSize:-1e4,synchronous:"FULL",mmapSize:0,...Q},this.retryConfig={attempts:3,delayMs:100,backoff:2,maxDelayMs:5000,...$};let J=rH(X);oH(J,{recursive:!0}),this.db=new sH(X,{create:!0}),tH(this.db,this.dbConfig),X0(this.db),E0(this.db),this.accounts=new h0(this.db),this.requests=new w0(this.db),this.oauth=new I0(this.db),this.strategy=new M0(this.db),this.stats=new D0(this.db),this.agentPreferences=new C0(this.db)}setRuntimeConfig(H){if(this.runtime=H,H.database?.retry)this.retryConfig={...this.retryConfig,...H.database.retry}}getDatabase(){return this.db}getRetryConfig(){return this.retryConfig}getAllAccounts(){return O(()=>{return this.accounts.findAll()},this.retryConfig,"getAllAccounts")}getAccount(H){return O(()=>{return this.accounts.findById(H)},this.retryConfig,"getAccount")}updateAccountTokens(H,Q,$,X){O(()=>{this.accounts.updateTokens(H,Q,$,X)},this.retryConfig,"updateAccountTokens")}updateAccountUsage(H){let Q=this.runtime?.sessionDurationMs||18000000;O(()=>{this.accounts.incrementUsage(H,Q)},this.retryConfig,"updateAccountUsage")}markAccountRateLimited(H,Q){O(()=>{this.accounts.setRateLimited(H,Q)},this.retryConfig,"markAccountRateLimited")}updateAccountRateLimitMeta(H,Q,$,X){this.accounts.updateRateLimitMeta(H,Q,$,X)}updateAccountTier(H,Q){this.accounts.updateTier(H,Q)}pauseAccount(H){this.accounts.pause(H)}resumeAccount(H){this.accounts.resume(H)}renameAccount(H,Q){this.accounts.rename(H,Q)}resetAccountSession(H,Q){this.accounts.resetSession(H,Q)}updateAccountRequestCount(H,Q){this.accounts.updateRequestCount(H,Q)}updateAccountPriority(H,Q){this.accounts.updatePriority(H,Q)}setAutoFallbackEnabled(H,Q){this.accounts.setAutoFallbackEnabled(H,Q)}saveRequestMeta(H,Q,$,X,J,Z){O(()=>this.requests.saveMeta(H,Q,$,X,J,Z),this.retryConfig,"saveRequestMeta")}saveRequest(H,Q,$,X,J,Z,Y,G,W,R,v){O(()=>this.requests.save({id:H,method:Q,path:$,accountUsed:X,statusCode:J,success:Z,errorMessage:Y,responseTime:G,failoverAttempts:W,usage:R,agentUsed:v}),this.retryConfig,"saveRequest")}updateRequestUsage(H,Q){O(()=>this.requests.updateUsage(H,Q),this.retryConfig,"updateRequestUsage")}saveRequestPayload(H,Q){O(()=>this.requests.savePayload(H,Q),this.retryConfig,"saveRequestPayload")}getRequestPayload(H){return this.requests.getPayload(H)}listRequestPayloads(H=50){return this.requests.listPayloads(H)}listRequestPayloadsWithAccountNames(H=50){return this.requests.listPayloadsWithAccountNames(H)}createOAuthSession(H,Q,$,X,J,Z,Y=10){this.oauth.createSession(H,Q,$,X,J,Z,Y)}getOAuthSession(H){return this.oauth.getSession(H)}deleteOAuthSession(H){this.oauth.deleteSession(H)}cleanupExpiredOAuthSessions(){return this.oauth.cleanupExpiredSessions()}getStrategy(H){return this.strategy.getStrategy(H)}setStrategy(H,Q){this.strategy.set(H,Q)}listStrategies(){return this.strategy.list()}deleteStrategy(H){return this.strategy.delete(H)}getRecentRequests(H=100){return this.requests.getRecentRequests(H)}getRequestStats(H){return this.requests.getRequestStats(H)}aggregateStats(H){return this.requests.aggregateStats(H)}getRecentErrors(H){return this.requests.getRecentErrors(H)}getTopModels(H){return this.requests.getTopModels(H)}getRequestsByAccount(H){return this.requests.getRequestsByAccount(H)}cleanupOldRequests(H,Q){let $=Date.now(),X=$-H,J=0;if(typeof Q==="number"&&Number.isFinite(Q)){let W=$-Q;J=this.requests.deleteOlderThan(W)}let Z=this.requests.deletePayloadsOlderThan(X),Y=this.requests.deleteOrphanedPayloads(),G=Z+Y;return{removedRequests:J,removedPayloads:G}}getAgentPreference(H){return this.agentPreferences.getPreference(H)}getAllAgentPreferences(){return this.agentPreferences.getAllPreferences()}setAgentPreference(H,Q){this.agentPreferences.setPreference(H,Q)}deleteAgentPreference(H){return this.agentPreferences.deletePreference(H)}setBulkAgentPreferences(H,Q){this.agentPreferences.setBulkPreferences(H,Q)}close(){this.db.exec("PRAGMA wal_checkpoint(TRUNCATE)"),this.db.close()}dispose(){this.close()}optimize(){this.db.exec("PRAGMA optimize"),this.db.exec("PRAGMA wal_checkpoint(PASSIVE)")}compact(){this.db.exec("PRAGMA wal_checkpoint(TRUNCATE)"),this.db.exec("VACUUM")}getStatsRepository(){return this.stats}}N();var g=new _("async-db-writer");class G0{queue=[];running=!1;intervalId=null;MAX_QUEUE_SIZE=1e4;droppedJobs=0;constructor(){this.intervalId=setInterval(()=>void this.processQueue(),100)}enqueue(H){if(this.queue.length>=this.MAX_QUEUE_SIZE){if(this.droppedJobs++,this.droppedJobs%100===1)g.warn(`Queue at capacity (${this.MAX_QUEUE_SIZE}), dropping jobs. Total dropped: ${this.droppedJobs}`);return}this.queue.push(H),this.processQueue()}async processQueue(){if(this.running||this.queue.length===0)return;this.running=!0;try{let H=0;while(this.queue.length>0){let Q=this.queue.shift();if(!Q)continue;try{await Q(),H++}catch($){g.error("Failed to execute DB job",$)}}if(H>0)g.debug(`Processed ${H} database jobs`)}finally{this.running=!1}}async dispose(){if(g.info("Flushing async DB writer queue..."),this.intervalId)clearInterval(this.intervalId),this.intervalId=null;await this.processQueue(),g.info("Async DB writer queue flushed",{remainingJobs:this.queue.length,droppedJobs:this.droppedJobs})}}M();N();y();M();function W0(H){if(!H||H===0)return"$0.0000";return`$${H.toFixed(4)}`}y();var __dirname="/home/tom/git_repos/better-ccflare/node_modules/@dqbd/tiktoken",d=qH(),jH={};jH["./tiktoken_bg.js"]=d;var p=o("path"),VQ=o("fs"),_H=__dirname.split(p.sep).reduce((H,Q,$,X)=>{let J=X.slice(0,$+1).join(p.sep)+p.sep;if(!J.includes("node_modules"+p.sep))H.unshift(p.join(J,"node_modules","tiktoken","","./tiktoken_bg.wasm"));return H},[]);_H.unshift(p.join(__dirname,"./tiktoken_bg.wasm"));var b0=null;for(let H of _H)try{b0=VQ.readFileSync(H);break}catch{}if(b0==null)throw Error("Missing tiktoken_bg.wasm");var OQ=new WebAssembly.Module(b0),TQ=new WebAssembly.Instance(OQ,jH);d.__wbg_set_wasm(TQ.exports);var{get_encoding:v0,encoding_for_model:LQ,Tiktoken:NQ}=d;M();function PH(H){let Q=H.reduce((J,Z)=>J+Z.length,0),$=Buffer.allocUnsafe(Q),X=0;for(let J of H)$.set(J,X),X+=J.length;return $}var j=new _("PostProcessor"),S=new Map;console.log("[WORKER] Post-processor worker started");j.info("Post-processor worker started");var f0=1e4,EQ=v0("cl100k_base"),i=new m,s=new G0,xH=Number(process.env.CF_STREAM_USAGE_BUFFER_KB||r.STREAM_USAGE_BUFFER_KB)*1024,u0=Number(process.env.CF_STREAM_TIMEOUT_MS||h.STREAM_TIMEOUT_DEFAULT);function kQ(H,Q){if(H.startsWith("/.well-known/")&&Q===404)return!1;return!0}function SQ(H){if(H.startsWith("event: "))return{event:H.slice(7).trim()};if(H.startsWith("data: "))return{data:H.slice(6).trim()};return{}}function hQ(H,Q){if(!H)return;let $=H.usage;if(!$)return;Q.usage.model=H.model??Q.usage.model,Q.usage.inputTokens=$.input_tokens??0,Q.usage.cacheReadInputTokens=$.cache_read_input_tokens??0,Q.usage.cacheCreationInputTokens=$.cache_creation_input_tokens??0,Q.usage.outputTokens=$.output_tokens??0;let X=(Q.usage.inputTokens??0)+(Q.usage.cacheReadInputTokens??0)+(Q.usage.cacheCreationInputTokens??0),J=Q.usage.outputTokens??0;Q.usage.totalTokens=X+J}function CQ(H,Q){try{let $=JSON.parse(H);if($.type==="message_start"&&$.message?.usage){let X=$.message.usage;if(Q.usage.inputTokens=X.input_tokens||0,Q.usage.cacheReadInputTokens=X.cache_read_input_tokens||0,Q.usage.cacheCreationInputTokens=X.cache_creation_input_tokens||0,Q.usage.outputTokens=X.output_tokens||0,$.message?.model)Q.usage.model=$.message.model}if($.type==="content_block_start"&&!Q.firstTokenTimestamp)Q.firstTokenTimestamp=Date.now();if($.type==="message_delta"){if(Q.lastTokenTimestamp=Date.now(),$.usage){if($.usage.output_tokens!==void 0)Q.providerFinalOutputTokens=$.usage.output_tokens,Q.usage.outputTokens=$.usage.output_tokens;if($.usage.input_tokens!==void 0)Q.usage.inputTokens=$.usage.input_tokens;if($.usage.cache_read_input_tokens!==void 0)Q.usage.cacheReadInputTokens=$.usage.cache_read_input_tokens;return}}if($.type==="content_block_delta"&&$.delta&&Q.providerFinalOutputTokens===void 0){let X;if($.delta.type==="text_delta"&&$.delta.text)X=$.delta.text;else if($.delta.type==="thinking_delta"&&$.delta.thinking)X=$.delta.thinking;if(X)try{let J=EQ.encode(X);Q.usage.outputTokensComputed=(Q.usage.outputTokensComputed||0)+J.length}catch(J){j.debug("Failed to count tokens:",J)}}if($.usage){if($.usage.input_tokens!==void 0)Q.usage.inputTokens=$.usage.input_tokens;if($.usage.output_tokens!==void 0)Q.usage.outputTokens=$.usage.output_tokens;if($.usage.cache_read_input_tokens!==void 0)Q.usage.cacheReadInputTokens=$.usage.cache_read_input_tokens;if($.usage.cache_creation_input_tokens!==void 0)Q.usage.cacheCreationInputTokens=$.usage.cache_creation_input_tokens}}catch{}}function IQ(H,Q){let $=new TextDecoder().decode(H);if(Q.buffer+=$,Q.lastActivity=Date.now(),Q.buffer.length>xH)Q.buffer=Q.buffer.slice(-xH);let X=Q.buffer.split(`
`);Q.buffer=X.pop()||"";let J="";for(let Z of X){let Y=Z.trim();if(!Y)continue;let G=SQ(Y);if(G.event)J=G.event;else if(G.data&&J)CQ(G.data,Q)}}async function wQ(H){let Q=!kQ(H.path,H.responseStatus);if(S.size>=f0){j.warn(`Requests map at capacity (${f0}), cleaning up oldest entries`);let X=Math.floor(f0*0.1),J=Array.from(S.keys()).slice(0,X);for(let Z of J)S.delete(Z)}let $={startMessage:H,buffer:"",chunks:[],usage:{},lastActivity:Date.now(),shouldSkipLogging:Q};if(H.agentUsed)$.agentUsed=H.agentUsed,j.debug(`Agent '${H.agentUsed}' used for request ${H.requestId}`);if(S.set(H.requestId,$),Q){j.debug(`Skipping logging for ${H.path} (${H.responseStatus})`);return}if(console.log(`[WORKER] Saving request meta for ${H.requestId}`),j.info(`Saving request meta for ${H.requestId} (${H.method} ${H.path})`),s.enqueue(()=>{try{i.saveRequestMeta(H.requestId,H.method,H.path,H.accountId,H.responseStatus,H.timestamp),j.info(`Successfully saved request meta for ${H.requestId}`)}catch(X){j.error(`Failed to save request meta for ${H.requestId}:`,X)}}),H.accountId&&H.accountId!==L){let X=H.accountId;s.enqueue(()=>i.updateAccountUsage(X))}}function DQ(H){let Q=S.get(H.requestId);if(!Q){j.warn(`No state found for request ${H.requestId}`);return}Q.chunks.push(H.data),IQ(H.data,Q)}async function UH(H){let Q=S.get(H.requestId);if(!Q){j.warn(`No state found for request ${H.requestId}`);return}let{startMessage:$}=Q,X=Date.now()-$.timestamp;if(Q.shouldSkipLogging){S.delete(H.requestId);return}if(!Q.usage.model&&H.responseBody)try{let W=Buffer.from(H.responseBody,"base64").toString("utf-8"),R=JSON.parse(W);hQ(R,Q)}catch{}if(Q.usage.model){let W=Q.providerFinalOutputTokens??Q.usage.outputTokens??Q.usage.outputTokensComputed??0;if(Q.usage.outputTokens=W,Q.usage.outputTokensComputed=void 0,Q.usage.totalTokens=(Q.usage.inputTokens||0)+W+(Q.usage.cacheReadInputTokens||0)+(Q.usage.cacheCreationInputTokens||0),Q.usage.costUsd=await L0(Q.usage.model,{inputTokens:Q.usage.inputTokens,outputTokens:W,cacheReadInputTokens:Q.usage.cacheReadInputTokens,cacheCreationInputTokens:Q.usage.cacheCreationInputTokens}),W>0){let R=X/1000;if(R>0)if(Q.usage.model?.startsWith("glm-"))Q.usage.tokensPerSecond=W/R,j.info(`ZAI token/s calculation: ${W} tokens / ${R}s = ${Q.usage.tokensPerSecond} tok/s (using total response time: ${X}ms)`);else if(Q.firstTokenTimestamp&&Q.lastTokenTimestamp){let j0=Q.lastTokenTimestamp-Q.firstTokenTimestamp,p0=j0/1000;if(j0>0)Q.usage.tokensPerSecond=W/p0,j.info(`Token/s calculation (streaming): ${W} tokens / ${p0}s = ${Q.usage.tokensPerSecond} tok/s (streaming duration: ${j0}ms)`);else Q.usage.tokensPerSecond=W/R,j.info(`Token/s calculation (fallback): ${W} tokens / ${R}s = ${Q.usage.tokensPerSecond} tok/s (total response time: ${X}ms)`)}else Q.usage.tokensPerSecond=W/R,j.info(`Token/s calculation (no timestamps): ${W} tokens / ${R}s = ${Q.usage.tokensPerSecond} tok/s (total response time: ${X}ms)`);else Q.usage.tokensPerSecond=W/0.001,j.info(`Token/s calculation (instant): ${W} tokens / 0.001s = ${Q.usage.tokensPerSecond} tok/s`)}}j.info(`Saving final request data for ${$.requestId}`),s.enqueue(()=>i.saveRequest($.requestId,$.method,$.path,$.accountId,$.responseStatus,H.success,H.error||null,X,$.failoverAttempts,Q.usage.model?{model:Q.usage.model,promptTokens:(Q.usage.inputTokens||0)+(Q.usage.cacheReadInputTokens||0)+(Q.usage.cacheCreationInputTokens||0),completionTokens:Q.usage.outputTokens,totalTokens:Q.usage.totalTokens,costUsd:Q.usage.costUsd,inputTokens:Q.usage.inputTokens,outputTokens:Q.usage.outputTokens,cacheReadInputTokens:Q.usage.cacheReadInputTokens,cacheCreationInputTokens:Q.usage.cacheCreationInputTokens,tokensPerSecond:Q.usage.tokensPerSecond}:void 0,Q.agentUsed));let J=null;if(H.responseBody)J=H.responseBody;else if(Q.chunks.length>0){let W=PH(Q.chunks);if(W.length>0)J=W.toString("base64")}let Z={request:{headers:$.requestHeaders,body:$.requestBody},response:{status:$.responseStatus,headers:$.responseHeaders,body:J},meta:{accountId:$.accountId||L,timestamp:$.timestamp,success:H.success,isStream:$.isStream,retry:$.retryAttempt}};if(s.enqueue(()=>i.saveRequestPayload($.requestId,Z)),Q.usage.model&&$.accountId!==L)j.info(`Usage for request ${$.requestId}: Model: ${Q.usage.model}, Tokens: ${Q.usage.totalTokens||0}, Cost: ${W0(Q.usage.costUsd)}`);let Y={id:$.requestId,timestamp:new Date($.timestamp).toISOString(),method:$.method,path:$.path,accountUsed:$.accountId,statusCode:$.responseStatus,success:H.success,errorMessage:H.error||null,responseTimeMs:X,failoverAttempts:$.failoverAttempts,model:Q.usage.model,promptTokens:Q.usage.inputTokens,completionTokens:Q.usage.outputTokens,totalTokens:Q.usage.totalTokens,inputTokens:Q.usage.inputTokens,cacheReadInputTokens:Q.usage.cacheReadInputTokens,cacheCreationInputTokens:Q.usage.cacheCreationInputTokens,outputTokens:Q.usage.outputTokens,costUsd:Q.usage.costUsd,agentUsed:Q.agentUsed,tokensPerSecond:Q.usage.tokensPerSecond};self.postMessage({type:"summary",summary:Y});let G={id:$.requestId,request:{headers:$.requestHeaders,body:$.requestBody},response:{status:$.responseStatus,headers:$.responseHeaders,body:J},error:H.error,meta:{accountId:$.accountId||L,timestamp:$.timestamp,success:H.success,retry:$.retryAttempt,path:$.path,method:$.method,agentUsed:Q.agentUsed}};self.postMessage({type:"payload",payload:G}),S.delete(H.requestId)}async function MQ(){j.info("Worker shutting down, flushing async writer..."),bQ(),await s.dispose(),i.close()}var n=null,yQ=()=>{if(!n)n=setInterval(()=>{let H=Date.now();for(let[Q,$]of S)if(H-$.lastActivity>u0)j.warn(`Request ${Q} appears orphaned (no activity for ${u0}ms), cleaning up...`),UH({type:"end",requestId:Q,success:!1,error:"Request orphaned - no activity"})},u0)},bQ=()=>{if(n)clearInterval(n),n=null};yQ();self.onmessage=async(H)=>{let Q=H.data;switch(console.log(`[WORKER] Received message type: ${Q.type}`),Q.type){case"start":await wQ(Q);break;case"chunk":DQ(Q);break;case"end":await UH(Q);break;case"shutdown":await MQ();break;default:j.warn(`Unknown message type: ${Q.type}`)}};
";